#!/usr/bin/env bash
# Build the 'locus' pintool and place it at locus/locus_pintool
set -euo pipefail
cd "$(dirname "$0")"

PIN="${PIN_ROOT:-$(pwd)/pin-3.31}"
if [[ ! -d "${PIN}" ]]; then
  echo "[locus] ERROR: PIN_ROOT does not exist: ${PIN}" >&2
  echo "[locus] Hint: source ./source.sh or run ./install.sh" >&2
  exit 1
fi
echo "[locus] Using PIN_ROOT=${PIN}"

# All build artifacts live here.
BUILD_DIR="build"
mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}"

# Generate clean makefiles in build/
cat > makefile <<'MK'
# Auto-generated by build.sh (out-of-tree)
PIN_ROOT ?= /path/to/pin
CONFIG_ROOT := $(PIN_ROOT)/source/tools/Config
include $(CONFIG_ROOT)/makefile.config
include makefile.rules
MK

cat > makefile.rules <<'MK'
# Auto-generated by build.sh
TOOL_ROOTS := locus_pintool
CXXFLAGS += -std=c++17
include $(CONFIG_ROOT)/makefile.default.rules
MK

# Symlink source so Pinâ€™s rules find locus.cpp in CWD
ln -sf ../locus_pintool.cpp locus_pintool.cpp

echo "[locus] Building locus pintool ..."
make PIN_ROOT="${PIN}" TARGET=intel64 obj-intel64/locus_pintool.so

# Copy result up one level to a stable path
cp -f obj-intel64/locus_pintool.so ../locus_pintool
chmod +x ../locus_pintool
mkdir -p ../outputs

echo "[locus] Built pintool -> $(cd ..; pwd)/locus_pintool"
